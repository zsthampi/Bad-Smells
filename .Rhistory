df[,"connectivity"] <- NULL
df[,"balcony"] <- NULL
df[,"outdoor"] <- NULL
df[,"laundry"] <- NULL
df[,"dishwasher"] <- NULL
df[,"building"] <- NULL
df[,"floor"] <- NULL
df[,"garden"] <- NULL
df[,"view"] <- NULL
df[,"bedroom_size"] <- NULL
df[,"services"] <- NULL
df[,"sauna"] <- NULL
df[,"library"] <- NULL
df[,"bike_storage"] <- NULL
df[,"bathroom_type"] <- NULL
df[,"atm"] <- NULL
for (i in 1:nrow(df)) {
for(str in df$features[[i]]) {
# PETS
if(grepl("pets.*not.*allowed",str,ignore.case = TRUE)) {
df[i,"pets"] <- "Pets Not Allowed"
}
else if(grepl("pets.*approval",str,ignore.case = TRUE) || grepl("pets.*case",str,ignore.case = TRUE)) {
df[i,"pets"] <- "Pets On Approval"
}
else if(grepl("pets.*ok",str,ignore.case = TRUE) || grepl("pets.*okay",str,ignore.case = TRUE) || grepl("pets.*friendly",str,ignore.case = TRUE) || grepl("pet.*friendly",str,ignore.case = TRUE)) {
df[i,"pets"] <- "Pets Allowed"
}
else if(grepl("dogs.*approval",str,ignore.case = TRUE) || grepl("dog.*approval",str,ignore.case = TRUE) || grepl("dogs.*case",str,ignore.case = TRUE) || grepl("specific.*dog",str,ignore.case = TRUE) || grepl("small.*dog",str,ignore.case = TRUE)) {
df[i,"pets"] <- "Dogs on Approval"
}
else if(grepl("dog.*ok",str,ignore.case = TRUE) || grepl("dogs.*ok",str,ignore.case = TRUE)) {
df[i,"pets"] <- "Dogs Allowed"
}
else if(grepl("cats ",str,ignore.case = TRUE) || grepl("cat ",str,ignore.case = TRUE)) {
df[i,"pets"] <- "Cats Allowed"
}
# ELEVATOR
if(grepl("elevator",str,ignore.case = TRUE)) {
df[i,"elevator"] <- TRUE
} else {
df[i,"elevator"] <- FALSE
}
# FITNESS CENTER
if(grepl("fitness center",str,ignore.case = TRUE) || grepl("fitness centre",str,ignore.case = TRUE) || grepl("fitness ",str,ignore.case = TRUE) || grepl("yoga ",str,ignore.case = TRUE) || grepl("gym ",str,ignore.case = TRUE) || grepl("exercise ",str,ignore.case = TRUE) || grepl("aerobic ",str,ignore.case = TRUE) || grepl("cardio ",str,ignore.case = TRUE) || grepl("basketball ",str,ignore.case = TRUE)) {
df[i,"fitness"] <- TRUE
} else {
df[i,"fitness"] <- FALSE
}
# POOL
if(grepl("swimming",str,ignore.case = TRUE) || grepl("pool",str,ignore.case = TRUE)) {
df[i,"pool"] <- TRUE
} else {
df[i,"pool"] <- FALSE
}
# ACCESSIBILITY
if(grepl("wheelchair",str,ignore.case = TRUE)) {
df[i,"accessibility"] <- TRUE
} else {
df[i,"accessibility"] <- FALSE
}
# CONCESSIONS
if(grepl("month .*free",str,ignore.case = TRUE) || grepl("free *.month",str,ignore.case = TRUE)) {
df[i,"concessions"] <- TRUE
} else {
df[i,"concessions"] <- FALSE
}
# BROKER FEE
if(grepl("no fee",str,ignore.case = TRUE) || grepl("no.*broker.*fee",str,ignore.case = TRUE)) {
df[i,"broker_fee"] <- "No Fee"
} else if(grepl("reduced.*fee",str,ignore.case = TRUE) || grepl("low.*fee",str,ignore.case = TRUE)) {
df[i,"broker_fee"] <- "Reduced Fee"
}
# PARKING
if(grepl("parking",str,ignore.case = TRUE)) {
df[i,"parking"] <- TRUE
} else {
df[i,"parking"] <- FALSE
}
# STORAGE
if(grepl("storage",str,ignore.case = TRUE) || grepl("garage",str,ignore.case = TRUE)) {
df[i,"storage"] <- TRUE
} else {
df[i,"storage"] <- FALSE
}
# PLAYROOM
if(grepl("playroom",str,ignore.case = TRUE) || grepl("play ",str,ignore.case = TRUE) || grepl("children ",str,ignore.case = TRUE) || grepl("nursery ",str,ignore.case = TRUE)) {
df[i,"playroom"] <- TRUE
} else {
df[i,"playroom"] <- FALSE
}
# CONNECTIVITY
if(grepl("internet",str,ignore.case = TRUE) || grepl("wifi",str,ignore.case = TRUE) || grepl("wi-fi",str,ignore.case = TRUE) || grepl("cable",str,ignore.case = TRUE) || grepl("satellite",str,ignore.case = TRUE)) {
df[i,"connectivity"] <- TRUE
} else {
df[i,"connectivity"] <- FALSE
}
# BALCONY / TERRACE
if(grepl("balcony",str,ignore.case = TRUE) || grepl("terrace",str,ignore.case = TRUE)) {
df[i,"balcony"] <- TRUE
} else {
df[i,"balcony"] <- FALSE
}
# OUTDOOR SPACE / BBQ
if(grepl("outdoor.*space",str,ignore.case = TRUE) || grepl("bbq",str,ignore.case = TRUE) || grepl("grill",str,ignore.case = TRUE)) {
df[i,"outdoor"] <- TRUE
} else {
df[i,"outdoor"] <- FALSE
}
# Laundry
if(grepl("washer.*dryer",str,ignore.case = TRUE) || grepl("laundry",str,ignore.case = TRUE)) {
df[i,"laundry"] <- TRUE
} else {
df[i,"laundry"] <- FALSE
}
# DISHWASHER
if(grepl("dish.*washer",str,ignore.case = TRUE)) {
df[i,"dishwasher"] <- TRUE
} else {
df[i,"dishwasher"] <- FALSE
}
# TYPE OF BUILDING
if(grepl("single.*storey",str,ignore.case = TRUE)) {
df[i,"building"] <- "Single Storey"
} else if(grepl("duplex",str,ignore.case = TRUE)) {
df[i,"building"] <- "Duplex"
} else if(grepl("low.*rise",str,ignore.case = TRUE)) {
df[i,"building"] <- "Lowrise"
} else if(grepl("studio",str,ignore.case = TRUE)) {
df[i,"building"] <- "Studio"
}
# TYPE OF FLOOR
if(grepl("redwood",str,ignore.case = TRUE)) {
df[i,"floor"] <- "Redwood"
} else if(grepl("hardwood",str,ignore.case = TRUE)) {
df[i,"floor"] <- "Hardwood"
} else if(grepl("oak.*floor",str,ignore.case = TRUE)) {
df[i,"floor"] <- "Oak"
} else if(grepl("parquet",str,ignore.case = TRUE)) {
df[i,"floor"] <- "Parquet"
} else if(grepl("herringbone",str,ignore.case = TRUE)) {
df[i,"floor"] <- "Herringbone"
}
# GARDEN
if(grepl("garden",str,ignore.case = TRUE)) {
df[i,"garden"] <- TRUE
} else {
df[i,"garden"] <- FALSE
}
# VIEW
if(grepl("view",str,ignore.case = TRUE) && grepl("interview",str,ignore.case = TRUE) && grepl("viewing",str,ignore.case = TRUE)) {
df[i,"view"] <- TRUE
} else {
df[i,"view"] <- FALSE
}
# BEDROOM
if(grepl("king.*bed",str,ignore.case = TRUE) || grepl("huge.*bed",str,ignore.case = TRUE)) {
df[i,"bedroom_size"] <- "King"
} else if(grepl("queen.*bed",str,ignore.case = TRUE)) {
df[i,"bedroom_size"] <- "Queen"
}
# SERVICES - Housekeeping / Supervisor / Door Man
if(grepl("housekeep",str,ignore.case = TRUE) || grepl("supervisor",str,ignore.case = TRUE) || grepl("door.*man",str,ignore.case = TRUE)) {
df[i,"services"] <- TRUE
} else {
df[i,"services"] <- FALSE
}
# SAUNULL
if(grepl("sauna",str,ignore.case = TRUE)) {
df[i,"sauna"] <- TRUE
} else {
df[i,"sauna"] <- FALSE
}
# LIBRARY
if(grepl("library",str,ignore.case = TRUE) || grepl("reading",str,ignore.case = TRUE)) {
df[i,"library"] <- TRUE
} else {
df[i,"library"] <- FALSE
}
# BIKE STORAGE
if(grepl("bike.*storage",str,ignore.case = TRUE)) {
df[i,"bike_storage"] <- TRUE
} else {
df[i,"bike_storage"] <- FALSE
}
# BATHROOMS
# if(grepl("1.5.*bath",str,ignore.case = TRUE)) {
#     df[i,"bathrooms"] <- "1.5"
# }
# else if(grepl("1/2.*bath",str,ignore.case = TRUE)) {
#     df[i,"bathrooms"] <- "0.5"
# }
# else if(grepl("1.*bath",str,ignore.case = TRUE) || grepl("one.*bath",str,ignore.case = TRUE)) {
#     df[i,"bathrooms"] <- "1"
# } else if(grepl("2.5.*bath",str,ignore.case = TRUE)) {
#     df[i,"bathrooms"] <- "2.5"
# }
# else if(grepl("2.*bath",str,ignore.case = TRUE) || grepl("two.*bath",str,ignore.case = TRUE)) {
#     df[i,"bathrooms"] <- "2"
# } else if(grepl("3.*bath",str,ignore.case = TRUE) || grepl("three.*bath",str,ignore.case = TRUE)) {
#     df[i,"bathrooms"] <- "3"
# }
# BATHROOM
if(grepl("marble.*bath",str,ignore.case = TRUE)) {
df[i,"bathroom_type"] <- "Marble"
} else if(grepl("granite.*bath",str,ignore.case = TRUE)) {
df[i,"bathroom_type"] <- "Granite"
} else if(grepl("window.*bath",str,ignore.case = TRUE)) {
df[i,"bathroom_type"] <- "Window"
}
# ATM
if(grepl("atm",str,ignore.case = TRUE) && grepl("batman",str,ignore.case = TRUE) && grepl("treatment",str,ignore.case = TRUE)) {
df[i,"atm"] <- TRUE
} else {
df[i,"atm"] <- FALSE
}
}
}
# file_conn <- file("train_with_features.json","w")
file_conn <- file("test_with_features.json","w")
writeLines(toJSON(df),file_conn)
close(file_conn)
library(stats)
library(pcalg)
library(vars)
library(urca)
?pc
library(swirl)
install_course_zip("/Users/zubin/Documents/NCSU/Courses/CSC 591 - BI/Tutorial/R/R_tutorial.zip", multi=TRUE,
which_course="R_Programming")
swirl()
5 + 7
x <- 5 + 7
x
y <- x-3
y
c(1.1,0,3.14)
c(1.1,9,3.14)
z <- c(1.1,9,3.14)
?c()
?c
z
setwd('/Users/zubin/Documents/NCSU/Courses/CSC 510 - Software Engineering/Bad-Smells')
issues <- read.csv(file="issues.csv",head=TRUE,sep=",")
issues$team <- as.factor(as.character(issues$team))
issues$created_at <- strptime(as.character(issues$created_at),format = "%Y-%m-%dT%H:%M:%SZ", tz="GMT")
issues$closed_at <- strptime(as.character(issues$closed_at),format = "%Y-%m-%dT%H:%M:%SZ", tz="GMT")
issues$span <- issues$closed_at - issues$created_at
issues$assignee <- as.character(issues$assignee)
names(issues)
issues_new <- issues[is.element(as.character(issues$created_by),c('user1','user2','user3','user4')),]
table(issues_new$team,issues_new$created_by)
issue$assignee
issues$assignee
issues$assignees
table(issues_new$team,issues_new$created_by)
issues_new$created_by <- as.factor(as.character(issues_new$created_by))
table(issues_new$team,issues_new$created_by)
x <- table(issues_new$team,issues_new$created_by)
for (i in 1:ncol(x)) {
x[,i] <- x[,i]/sum(x[,i])
}
barplot(x,legend.text = TRUE,args.legend = list(x="top",inset=c(0,-0.2),horiz=TRUE))
x <- table(issues_new$created_by,issues_new$team)
for (i in 1:ncol(x)) {
x[,i] <- x[,i]/sum(x[,i])
}
barplot(x,legend.text = TRUE,args.legend = list(x="top",inset=c(0,-0.2),horiz=TRUE))
x
x <- table(issues_new$created_by,issues_new$team)
for (i in 1:ncol(x)) {
x[,i] <- x[,i]/sum(x[,i])
}
barplot(x,legend.text = TRUE,args.legend = list(x="top",inset=c(0,-0.2),horiz=TRUE))
x <- table(issues_new$created_by,issues_new$team)
for (i in 1:ncol(x)) {
x[,i] <- x[,i]/sum(x[,i])
}
barplot(x,legend.text = TRUE,args.legend = list(x="top",inset=c(0,-0.1),horiz=TRUE))
x
unique(issues$assignee)
typeof(issues$assignees)
issues <- read.csv(file="issues.csv",head=TRUE,sep=",")
issues$team <- as.factor(as.character(issues$team))
issues$created_at <- strptime(as.character(issues$created_at),format = "%Y-%m-%dT%H:%M:%SZ", tz="GMT")
issues$closed_at <- strptime(as.character(issues$closed_at),format = "%Y-%m-%dT%H:%M:%SZ", tz="GMT")
issues$span <- issues$closed_at - issues$created_at
issues$assignee <- as.character(issues$assignee)
issues_new <- issues[issues$assignee=="",]
unique(issues_new$assignees)
issues_new$assignees
nrow(issues_new)
table(issues_new$team)
barplot(table(issues_new$team))
barplot(sort(table(issues_new$team)))
table(issues_new$team)/table(issue$team)
x <- df(table(issues_new$team))
x <- data.frame(table(issues_new$team))
x
x$total <- unname(table(issues$team))
x
table(issues$team)
x$pc <- x$Freq/x$total
plot(x$Var1,x$pc)
x
sor(x)
sort(x)
sort(x$pc)
sort(x,x$pc)
?sort
?order
x[order(x$pc),]
plot(x[order(x$pc),])
plot(x[order(x$pc),]$Var1,x[order(x$pc),]$pc)
x <- x[order(x$pc),]
plot(x$Var1,x$pc)
x
x$Var1
plot(as.character(x$Var1),as.numeric(x$pc))
plot(as.character(x$Var1),x$pc)
x$Var1 <- as.character(x$Var1)
plot(x$Var1,x$pc)
x
typeof(x$pc)
plot(x$Var1)
typeof(x$Var1)
plot(x$Var1,x$pc)
plot(x$Freq,x$pc)
plot(x$pc)
plot(as.factor(x$Var1),x$pc)
x
issues <- read.csv(file="issues.csv",head=TRUE,sep=",")
issues$team <- as.factor(as.character(issues$team))
issues$created_at <- strptime(as.character(issues$created_at),format = "%Y-%m-%dT%H:%M:%SZ", tz="GMT")
issues$closed_at <- strptime(as.character(issues$closed_at),format = "%Y-%m-%dT%H:%M:%SZ", tz="GMT")
issues$span <- issues$closed_at - issues$created_at
issues$assignee <- as.character(issues$assignee)
issues_new <- issues[issues$assignee=="",]
table(issues_new$team)
x <- table(issues_new$team)
x
x[1]
names(x)
x <- x <- table(issues_new$team)
for (i in 1:ncol(x)) {
print (x[i])
print (names(x)[i])
}
x <- table(issues_new$team)
for (i in 1:ncol(x)) {
print (x[i])
print (names(x)[i])
}
ncol(x)
nrow(x)
issues_new <- issues[issues$assignee=="",]
x <- table(issues_new$team)
for (i in 1:nrow(x)) {
print (x[i])
print (names(x)[i])
}
x
# Number of unassigned issues
issues_new <- issues[issues$assignee=="",]
x <- table(issues_new$team)
for (i in 1:nrow(x)) {
x[i] <- x[i]/nrow(issues[issues$team==names(x)[i],])
}
x
barplot(x,legend.text = TRUE,args.legend = list(x="top",inset=c(0,-0.2),horiz=TRUE))
barplot(x,legend.text = TRUE,args.legend = list(x="top",inset=c(0,-0.2),horiz=TRUE),xlim=c(0,1))
barplot(x,legend.text = TRUE,args.legend = list(x="top",inset=c(0,-0.2),horiz=TRUE),ylim=c(0,1))
barplot(sort(x),legend.text = TRUE,args.legend = list(x="top",inset=c(0,-0.2),horiz=TRUE),ylim=c(0,1))
abline(h=mean(x), col = "blue")
abline(h=mean(x) + sd(x), col = "red")
abline(h=mean(x) - sd(x), col = "red")
abline(h=median(x), col = "green")
# add legend
legend_col <- c()
legend_col <- c(legend_col, "blue")
legend_col <- c(legend_col, "red")
legend_col <- c(legend_col, "green")
legend(0,100, c(sprintf("mean: %f",mean(x)),
sprintf("standard deviation: %f",sd(x)),
sprintf("median: %f",median(x))
),
lty=c(1,1), lwd=c(2,2.5),col=legend_col)
legend("topleft", c(sprintf("mean: %f",mean(x)),
sprintf("standard deviation: %f",sd(x)),
sprintf("median: %f",median(x))
),
lty=c(1,1), lwd=c(2,2.5),col=legend_col)
barplot(x,legend.text = TRUE,args.legend = list(x="top",inset=c(0,-0.2),horiz=TRUE))
abline(h=mean(x), col = "blue")
abline(h=mean(x) + sd(x), col = "red")
abline(h=mean(x) - sd(x), col = "red")
abline(h=median(x), col = "green")
# add legend
legend_col <- c()
legend_col <- c(legend_col, "blue")
legend_col <- c(legend_col, "red")
legend_col <- c(legend_col, "green")
legend("topleft", c(sprintf("mean: %f",mean(x)),
sprintf("standard deviation: %f",sd(x)),
sprintf("median: %f",median(x))
),
lty=c(1,1), lwd=c(2,2.5),col=legend_col, inset=c(-0.1,0))
barplot(x,legend.text = TRUE,args.legend = list(x="top",inset=c(0,-0.2),horiz=TRUE))
abline(h=mean(x), col = "blue")
abline(h=mean(x) + sd(x), col = "red")
abline(h=mean(x) - sd(x), col = "red")
abline(h=median(x), col = "green")
# add legend
legend_col <- c()
legend_col <- c(legend_col, "blue")
legend_col <- c(legend_col, "red")
legend_col <- c(legend_col, "green")
legend("topleft", c(sprintf("mean: %f",mean(x)),
sprintf("standard deviation: %f",sd(x)),
sprintf("median: %f",median(x))
),
lty=c(1,1), lwd=c(2,2.5),col=legend_col, inset=c(0.1,0))
barplot(sort(x),legend.text = TRUE,args.legend = list(x="top",inset=c(0,-0.2),horiz=TRUE))
abline(h=mean(x), col = "blue")
abline(h=mean(x) + sd(x), col = "red")
abline(h=mean(x) - sd(x), col = "red")
abline(h=median(x), col = "green")
# add legend
legend_col <- c()
legend_col <- c(legend_col, "blue")
legend_col <- c(legend_col, "red")
legend_col <- c(legend_col, "green")
legend("topleft", c(sprintf("mean: %f",mean(x)),
sprintf("standard deviation: %f",sd(x)),
sprintf("median: %f",median(x))
),
lty=c(1,1), lwd=c(2,2.5),col=legend_col, inset=c(0.05,0))
issues <- read.csv(file="issues.csv",head=TRUE,sep=",")
issues$team <- as.factor(as.character(issues$team))
issues$created_at <- strptime(as.character(issues$created_at),format = "%Y-%m-%dT%H:%M:%SZ", tz="GMT")
issues$closed_at <- strptime(as.character(issues$closed_at),format = "%Y-%m-%dT%H:%M:%SZ", tz="GMT")
issues$span <- issues$closed_at - issues$created_at
issues$assignee <- as.character(issues$assignee)
issues_new <- issues[issues$span<500,]
table(issues_new$team)
issues_new$span
issues$span
mean(issues$span)
issues_new <- issues[is.na(issues$span)==FALSE,]
issues_new$span
mean(issues_new$span)
sd(issues_new$span)
issues_new <- issues_new[issues_new$span<1800,]
table(issues_new$team)
table(issues$team)
issues_new <- issues_new[issues_new$span<600,]
table(issues$team)
table(issues_new$team)
issues_new <- issues_new[issues_new$span<300,]
table(issues_new$team)
issues_new <- issues[is.na(issues$span)==FALSE,]
mean(issues_new$span)
sd(issues_new$span)
mean(issues_new$span)/(60)
mean(issues_new$span)/(60*60)
mean(issues_new$span)/(60*60*24)
median(issues_new$span)/(60*60*24)
issues_new <- issues[is.na(issues$span)==FALSE,]
?histogram
??histogram
library(gplots)
hist2d(issues_new$span)
?qqplot
qqplot(issues_new$span)
?pearson.test
??pearson.test
?histogram
??histogram
?hist
hist(issues_new$span)
issues_new$span <- as.numeric(issues_new$span)
hist(issues_new$span)
issues_new$span <- issues_new$span/(60)
hist(issues_new$span)
issues_new$span <- issues_new$span/(60)
hist(issues_new$span)
issues_new$span <- issues_new$span/(24)
hist(issues_new$span)
hist(issues_new$span,ylim=c(0,300))
issues_new <- issues[is.na(issues$span)==FALSE,]
mean(issues_new$span)
sd(issues_new$span)
issues_new$span <- issues_new$span/(60*60)
hist(issues_new$span,ylim=c(0,300))
issues_new <- issues[is.na(issues$span)==FALSE,]
issues_new$span <- as.numeric(issues_new$span)
issues_new$span <- issues_new$span/(60*60)
mean(issues_new$span)
sd(issues_new$span)
hist(issues_new$span,ylim=c(0,300))
?hist
hist(issues_new$span,ylim=c(0,300),breaks=10)
hist(issues_new$span,ylim=c(0,300),breaks=30)
hist(issues_new$span,ylim=c(0,300),breaks=500)
hist(issues_new$span,ylim=c(0,300),breaks=50)
hist(issues_new$span,ylim=c(0,150),breaks=50)
max(issues_new$span)
hist(issues_new$span,ylim=c(0,150),breaks=50,main="Historgram of issue closing time in minutes")
hist(issues_new$span,ylim=c(0,150),breaks=50,main="Historgram of issue closing time in hours")
hist(issues_new$span,ylim=c(0,150),breaks=170,main="Historgram of issue closing time in hours")
hist(issues_new$span,ylim=c(0,150),breaks=85,main="Historgram of issue closing time in hours")
hist(issues_new$span,ylim=c(0,150),breaks=85,main="Historgram of issue closing time in hours",xlab = "Time in hours")
